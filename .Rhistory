ggplot(mapping = aes(x = storeName, y = scansCount)) +
geom_col(width = 0.5) +
scale_y_continuous(breaks = seq(0, 1800, by = 100)) +
geom_text(mapping = aes(label = scansCount), position=position_dodge(width=0.9), vjust=-0.25) + ggtitle("5 stores users scanned most from") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# plot: 5 stores customers scanned most from
cohort_stores_top5_scanned_most_plot
# table: 5 stores customers scanned most from
knitr::kable(cohort_users_5_stores_scanned_most_from)
# making sure that we are only using users that satisfy cohort definition
cohort_source_users <- customer_user_raw %>%
filter(customerId %in% cohort_customers)
# removing duplicate rows (if any)
cohort_source_users <- cohort_source_users[!duplicated(cohort_source_users), ]
# grouping and summarizing by "source" column
cohort_source_users <- cohort_source_users %>%
group_by(source) %>%
summarise(userCount = n())
# Answer table for Q6 Part 4: Which source has the most users coming from?
cohort_source_most_users_table <- cohort_source_users %>%
slice_max(userCount, n = 5)
# plot: Top 5 sources from which most users are coming
cohort_source_most_users_table_plot <-
cohort_source_most_users_table %>%
dplyr::arrange(userCount) %>%
ggplot(mapping = aes(x = source, y = userCount)) +
geom_col(width = 0.5) +
scale_y_continuous(breaks = seq(0, 1800, by = 100)) +
geom_text(mapping = aes(label = userCount), position=position_dodge(width=0.9), vjust=-0.25) + ggtitle("Top 5 sources from which most users are coming") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# plot: Top 5 sources from which most users are coming
cohort_source_most_users_table_plot
# table: Top 5 sources from which most users are coming
cohort_source_most_users_table
tmp <- customer_user_raw %>%
filter(customerId %in% cohort_customers)
tmp %>%
group_by(tierId, gender)
tmp %>%
ggplot(mapping = aes(x = tierID, fill = gender)) +
geom_bar(position = "dodge")
tmp %>%
ggplot(mapping = aes(x = tierId, fill = gender)) +
geom_bar(position = "dodge")
View(tmp)
foo_tmp <- customer_user_raw %>%
filter(customerId %in% cohort_customers)
foo_tmp %>%
ggplot(mapping = aes(x = tierId, fill = gender)) +
geom_bar(position = "dodge") +
ggtitle("gender distribution within tiers")
View(foo_tmp)
# gender distribution within tiers
foo_tmp %>%
ggplot(mapping = aes(x = tierId, fill = gender)) +
geom_bar(position = "dodge") +
ggtitle("gender distribution within tiers")
view(customer_user_raw)
view(customer_scans_raw)
foo_scans_tmp <- customer_scans_raw %>%
filter(customerId %in% cohort_customers)
# billTotal distribution box-plot for each store
foo_scans_tmp %>%
ggplot(mapping = aes(x = storeName, y = billTotal)) +
geom_boxplot() +
ggtitle("billTotal distribution for each store")
# billTotal distribution box-plot for each store
foo_scans_tmp %>%
ggplot(mapping = aes(x = storeName, y = billTotal)) +
geom_boxplot() +
ggtitle("billTotal distribution for each store") +
coord_flip()
cohort_users_5_stores_scanned_most_from$storeName
# billTotal distribution for top 5 stores users scanned most from
foo_scans_tmp %>%
ggplot(mapping = aes(x = storeName, y = billTotal)) +
geom_boxplot() +
ggtitle("billTotal distribution for each store") +
coord_flip()
foo_scans_tmp <- customer_scans_raw %>%
filter(customerId %in% cohort_customers,
storeName %in% cohort_users_5_stores_scanned_most_from$storeName)
# billTotal distribution for top 5 stores users scanned most from
foo_scans_tmp %>%
ggplot(mapping = aes(x = storeName, y = billTotal)) +
geom_boxplot() +
ggtitle("billTotal distribution for each store") +
coord_flip()
# billTotal distribution for top 5 stores users scanned most from
foo_scans_tmp %>%
ggplot(mapping = aes(x = storeName, y = billTotal)) +
geom_boxplot() +
ggtitle("billTotal distribution for each store") +
scale_x_continuous(breaks = seq(0, 1000000000, by = 500)) +
coord_flip()
# billTotal distribution for top 5 stores users scanned most from
foo_scans_tmp %>%
ggplot(mapping = aes(x = storeName, y = billTotal)) +
geom_boxplot() +
ggtitle("billTotal distribution for each store") +
scale_y_continuous(breaks = seq(0, 1000000000, by = 500))
# billTotal distribution for top 5 stores users scanned most from
foo_scans_tmp %>%
ggplot(mapping = aes(x = storeName, y = billTotal, size = billTotal)) +
geom_point() +
ggtitle("billTotal distribution for each store")
foo_scans_tmp %>%
filter(storeName != "Luxe") %>%
ggplot(mapping = aes(x = storeName, y = billTotal, size = billTotal)) +
geom_point() +
ggtitle("billTotal distribution for each store")
foo_scans_tmp %>%
filter(storeName != "Luxe") %>%
ggplot(mapping = aes(x = storeName, y = billTotal)) +
geom_boxplot() +
ggtitle("billTotal distribution for each store")
foo_scans_tmp %>%
filter(storeName != "Luxe", storeName != "Big Bazaar") %>%
ggplot(mapping = aes(x = storeName, y = billTotal)) +
geom_boxplot() +
ggtitle("billTotal distribution for each store")
foo_scans_tmp %>%
filter(storeName != "Luxe", storeName != "Big Bazaar") %>%
ggplot(mapping = aes(x = storeName, y = billTotal, size = billTotal)) +
geom_point() +
ggtitle("billTotal distribution for each store")
foo_scans_tmp %>%
filter(storeName != "Luxe", storeName != "Big Bazaar") %>%
ggplot(mapping = aes(x = storeName, y = billTotal, size = billTotal)) +
geom_boxplot() +
ggtitle("billTotal distribution for Latt Liv, Lifestyle, Miniso")
# grouping and summarising by tierId
tier_dist_cohort_users <- tier_dist_cohort_users %>%
group_by(tierId) %>%
summarise(countOfUsers = n(), percent = countOfUsers/sum(countOfUsers))
tier_dist_cohort_users
# grouping and summarising by tierId
tier_dist_cohort_users <- tier_dist_cohort_users %>%
group_by(tierId) %>%
summarise(countOfUsers = n())
tier_dist_cohort_users
# grouping and summarising by tierId
tier_dist_cohort_users <- tier_dist_cohort_users %>%
group_by(tierId) %>%
summarise(countOfUsers = n(), perc = n()/sum(n()))
tier_dist_cohort_users
# grouping and summarising by tierId
tier_dist_cohort_users <- tier_dist_cohort_users %>%
group_by(tierId) %>%
summarise(countOfUsers = n()) %>%
mutate(percUsers = countOfUsers/sum(countOfUsers))
tier_dist_cohort_users
rm(list = ls())
foo_scans_tmp %>%
filter(storeName != "Luxe", storeName != "Big Bazaar") %>%
ggplot(mapping = aes(x = storeName, y = billTotal, size = billTotal)) +
scale_y_log10() +
geom_boxplot() +
ggtitle("billTotal distribution for Latt Liv, Lifestyle, Miniso")
# billTotal distribution for top 5 stores users scanned most from
foo_scans_tmp %>%
ggplot(mapping = aes(x = storeName, y = billTotal, size = billTotal)) +
geom_point() +
ggtitle("billTotal distribution for each store")
rm(list = ls())
# metadata---------------------------------------------------------------------
# author: Aarsh Batra
# Start Date: October 07, 2021
# R version: 4.1.1 (2021-08-10)
# nickname: Kick Things
# Platform: x86_64-w64-mingw32
# arch: x86_64
# Running under: Windows 10 x64 (build 18363)
# R Studio version info: 2021.09.0+351 "Ghost Orchid"
# e-mail: aarshbatra.in@gmail.com
# load libraries---------------------------------------------------------------
library(tidyverse)
library(knitr)
library(devtools)
library(stringr)
library(tidyr)
library(dplyr)
library(skimr)
library(magrittr)
library(data.table)
library(lubridate)
library(roxygen2)
library(testthat)
library(ggplot2)
library(readr)
library(readxl)
# loading the entire package--------------------------------------------------
devtools::load_all()
# read in raw .xlsx datasets into R--------------------------------------------
coupon_transactions_raw <- read_raw_xlsx_data("couponTransactions.xlsx")
customer_scans_raw <- read_raw_xlsx_data("customerScans.xlsx")
customer_user_raw <- read_raw_xlsx_data("customerUser.xlsx")
# exploring coupon_transaction_raw dataset-------------------------------------
# View(coupon_transactions_raw)
# getting a basic summary
skimr::skim(coupon_transactions_raw)
# # number of unique customers
#   length(unique(coupon_transactions_raw$customerId)) # 14979
#
# # number of unique couponUnlock dates
#   length(unique(coupon_transactions_raw$couponUnlockDate)) # 291
#
# # number of unique couponId's
# length(unique(coupon_transactions_raw$couponId)) # 328
# exploring customer_scans_raw dataset-----------------------------------------
# View(customer_scans_raw)
# skim customer_scans_raw dataset
skimr::skim(customer_scans_raw)
# # max amount for billTotal column
# max(customer_scans_raw$billTotal) # why is this too big? look into this.
#
# # number of unique customers
# length(unique(customer_scans_raw$customerId))
#
# # number of unique scan log ids
# length(unique(customer_scans_raw$scanlogId))
#
# # number of unique stores
# length(unique(customer_scans_raw$storeName))
#
# # store with the maximum bill total
# customer_scans_raw %>%
#   filter(billTotal == max(billTotal)) %>%
#   select(storeName)
#
# exploring customer_user_raw data---------------------------------------------
# View(customer_user_raw)
# skim customer_user_raw dataset
skimr::skim(customer_user_raw)
# # number of unique customers
# unique(length(customer_user_raw$customerId))
#
# # number of unique tierId's
# length(unique(customer_user_raw$tierId))
#
# wrapping up exploratory data analysis with a few more queries-----------------
colnames_for_datasets_list <- list(coup_trans_col = colnames
(coupon_transactions_raw),
cust_scans_col = colnames(customer_scans_raw),
cust_user_col = colnames(customer_user_raw))
# one common column between coupon_transactions_raw and customer_scans_raw
sum(colnames_for_datasets_list[[2]] %in%
colnames_for_datasets_list[[1]])  # customerId
# two common columns between customer_scans_raw and customer_user_raw
sum(colnames_for_datasets_list[[3]] %in%
colnames_for_datasets_list[[2]]) # customerId, createdAt
# one common column between customer_user_raw and coupon_transactions_raw
sum(colnames_for_datasets_list[[3]] %in%
colnames_for_datasets_list[[1]]) # customerId
# number of users who have logged in after 1st September 2021, till date
customer_user_raw_Q1_subset <- customer_user_raw %>%
select(customerId, createdAt, lastLogin, tierId) %>%
filter(lastLogin > lubridate::as_datetime("2020-09-01")) %>%
distinct()
customer_user_raw_Q1_subset
num_users_log_in_after_sep2021 <- customer_user_raw_Q1_subset %>%
nrow()
num_users_log_in_after_sep2021 # answer to Q1Part-1 = 10,323 users
# Of the above 10,323 users, how many signed up in September, 2019.
num_user_logInAfterSep2021_signedUpInSep2019 <- customer_user_raw_Q1_subset %>%
dplyr::filter(lubridate::month(createdAt) == 09, lubridate::year(createdAt) == 2019) %>%
nrow()
num_user_logInAfterSep2021_signedUpInSep2019 # answer to Q2Part-2 = 209 users
# sanity check
sum(is.na(customer_user_raw$earnedPoints))
# Number of users who have earnedPoints more than 2000
num_users_earned_points_more_than_2000 <- customer_user_raw %>%
dplyr::filter(earnedPoints > 2000) %>%
distinct() %>%
nrow()
num_users_earned_points_more_than_2000            # answer to Q2 = 1261
customer_scans_raw_Q3_subset <- customer_scans_raw %>%
filter(customerId == 83, lubridate::month(createdAt) == 02,
lubridate::year(createdAt) == 2020) %>%
dplyr::select(customerId, storeName, createdAt, image) %>%
dplyr::group_by(storeName) %>%
dplyr::summarise(numBillsScanned = length(unique(image))) %>%
dplyr::mutate(customerId = 83, month = "February, 2020") %>%
dplyr::select(customerId, everything())
knitr::kable(customer_scans_raw_Q3_subset)
# creating a coupon_transactions_raw with duplicate rows removed
coupon_transactions_raw_unique <- coupon_transactions_raw[!duplicated(coupon_transactions_raw), ]
coupon_transactions_raw_Q4_subset <- coupon_transactions_raw_unique %>%
filter(couponUnlockDate == lubridate::as_datetime("2020-09-10")) %>%
group_by(customerId) %>%
summarise(numUniqueCouponsUnlocked = length(unique(couponId))) %>%
mutate(dateOnWhichCouponUnlocked = "September 10, 2020")
num_unique_users_unlocked_coupons_on_Sep102020 <-
nrow(coupon_transactions_raw_Q4_subset)     # answer to Q4 = 34 unique users.
knitr::kable(coupon_transactions_raw_Q4_subset)
# sanity checks (for understanding purposes only, these sanity check variables
# are not used in code)
foo <- dplyr::left_join(x = coupon_transactions_raw, y = customer_user_raw, by = c("customerId" = "customerId"))
sum(coupon_transactions_raw$customerId %in% customer_user_raw$customerId)
sum(!(customer_user_raw$customerId %in% coupon_transactions_raw$customerId))
foo1Ind <- customer_user_raw$customerId %in% coupon_transactions_raw$customerId
foo1Val <- customer_user_raw$customerId[foo1Ind]
nrow(filter(coupon_transactions_raw, customerId %in% foo1Val))
# First: left_join the "customer_user_raw" and "coupon_transaction_raw_unique" data by the "customerId" column as a KEY
customer_user_coupon_join_Q5 <- dplyr::left_join(x = customer_user_raw, y = coupon_transactions_raw_unique, by = "customerId")
# removing duplicate rows
customer_user_coupon_join_Q5_unique <-  customer_user_coupon_join_Q5[!duplicated(customer_user_coupon_join_Q5), ]
# create Pivot table, by using tierId  as the "group" column
pivot_table_by_tier_Q5 <- customer_user_coupon_join_Q5_unique %>%
dplyr::group_by(tierId) %>%
dplyr::summarise(numUniqueUsersInEachTier = length(unique(customerId)),
totalCouponsUnlocked = sum(!is.na(couponUnlockDate)),
averageEarnedPoints = mean(earnedPoints, na.rm = TRUE),
averageBurnedPoints = mean(burnedPoints, na.rm = TRUE))
knitr::kable(pivot_table_by_tier_Q5)
# get a vector of customerId's that satisfy the cohort conditions--------------
# customers with scan count > 4
customer_scans_raw_Q6_subset <- customer_scans_raw %>%
group_by(customerId) %>%
summarise(scanCount = sum(!is.na(unique(scanlogId)))) %>%
filter(scanCount > 4)
# removing duplicates
customer_scans_raw_Q6_subset_unique <- customer_scans_raw_Q6_subset[
!duplicated(customer_scans_raw_Q6_subset), ]
# For the customers whose scan count is greater than 4, select those whose
# coupon transaction count > 2.
# creating a subset of data that corresponds to those customers whose
# scan count > 4
coupon_transactions_raw_Q6_subset <- coupon_transactions_raw %>%
filter(customerId %in% customer_scans_raw_Q6_subset_unique$customerId)
# removing any duplicate rows
coupon_transactions_raw_Q6_subset_unique <-  coupon_transactions_raw_Q6_subset[!duplicated
(coupon_transactions_raw_Q6_subset), ]
# dataset containing customers whose "scanCount" > 4 and couponTransactionCount
# is > 2
coupon_transactions_raw_Q6_subset_unique_finCohort <- coupon_transactions_raw_Q6_subset_unique %>%
group_by(customerId) %>%
summarise(couponTransactionCount = sum(!is.na(couponUnlockDate))) %>%
filter(couponTransactionCount > 2)
# putting the cohort customers (that satisfy the cohort definition) into a
# vector
cohort_customers <- coupon_transactions_raw_Q6_subset_unique_finCohort$customerId
# making sure that we are only using users that satisfy cohort definition
tier_dist_cohort_users <- customer_user_raw %>%
filter(customerId %in% cohort_customers)
# removing duplicate rows (if any)
tier_dist_cohort_users <- tier_dist_cohort_users[!duplicated(tier_dist_cohort_users), ]
# grouping and summarising by tierId
tier_dist_cohort_users <- tier_dist_cohort_users %>%
group_by(tierId) %>%
summarise(countOfUsers = n()) %>%
mutate(percentOfUsers = (countOfUsers/sum(countOfUsers, na.rm = TRUE))*100)
# plot: tier distribution of cohort users
tier_dist_cohort_users_plot <-  tier_dist_cohort_users %>%
ggplot(mapping = aes(x = tierId, y = countOfUsers)) +
geom_col(width = 0.5) +
scale_y_continuous(breaks = seq(0, 500, by = 30)) +
geom_text(mapping = aes(label = countOfUsers), position=position_dodge(width=0.9), vjust=-0.25) + ggtitle("Tier distribution of Cohort users") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# plot: tier distribution of cohort users
tier_dist_cohort_users_plot
# Table: tier distribution of cohort users
knitr::kable(tier_dist_cohort_users)
# making sure that we are only using users that satisfy cohort definition
gender_dist_cohort_users <- customer_user_raw %>%
filter(customerId %in% cohort_customers)
# removing duplicate rows (if any)
gender_dist_cohort_users <- gender_dist_cohort_users[!duplicated(gender_dist_cohort_users), ]
# grouping and summarising by gender
gender_dist_cohort_users <- gender_dist_cohort_users %>%
group_by(gender) %>%
summarise(countOfUsers = n()) %>%
mutate(percentOfUsers = (countOfUsers/sum(countOfUsers, na.rm = TRUE))*100)
# plot: gender distribution of cohort users
gender_dist_cohort_users_plot <-  gender_dist_cohort_users %>%
ggplot(mapping = aes(x = gender, y = countOfUsers)) +
geom_col(width = 0.5) +
scale_y_continuous(breaks = seq(0, 500, by = 30)) +
geom_text(mapping = aes(label = countOfUsers), position=position_dodge(width=0.9), vjust=-0.25) + ggtitle("Gender distribution of Cohort users") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# plot: gender distribution of cohort users
gender_dist_cohort_users_plot
# table: gender distribution of cohort users
knitr::kable(gender_dist_cohort_users)
# making sure that we are only using users that satisfy cohort definition
cohort_users_5_stores_scanned_most_from <- customer_scans_raw %>%
filter(customerId %in% cohort_customers)
# removing duplicate rows (if any)
cohort_users_5_stores_scanned_most_from <- cohort_users_5_stores_scanned_most_from[!duplicated(cohort_users_5_stores_scanned_most_from), ]
# grouping and summarising by Store name
cohort_users_5_stores_scanned_most_from <- cohort_users_5_stores_scanned_most_from %>%
group_by(storeName) %>%
summarise(scansCount = n()) %>%
slice_max(scansCount, n = 5) %>%
mutate(scansPercentage = (scansCount/sum(scansCount, na.rm = TRUE))*100)
# plot: 5 stores the user scanned the most from
cohort_stores_top5_scanned_most_plot <-
cohort_users_5_stores_scanned_most_from %>%
dplyr::arrange(scansCount) %>%
ggplot(mapping = aes(x = storeName, y = scansCount)) +
geom_col(width = 0.5) +
scale_y_continuous(breaks = seq(0, 1800, by = 100)) +
geom_text(mapping = aes(label = scansCount), position=position_dodge(width=0.9), vjust=-0.25) + ggtitle("5 stores users scanned most from") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# plot: 5 stores customers scanned most from
cohort_stores_top5_scanned_most_plot
# table: 5 stores customers scanned most from
knitr::kable(cohort_users_5_stores_scanned_most_from)
# making sure that we are only using users that satisfy cohort definition
cohort_source_users <- customer_user_raw %>%
filter(customerId %in% cohort_customers)
# removing duplicate rows (if any)
cohort_source_users <- cohort_source_users[!duplicated(cohort_source_users), ]
# grouping and summarizing by "source" column
cohort_source_users <- cohort_source_users %>%
group_by(source) %>%
summarise(userCount = n()) %>%
mutate(userPercentage = (userCount/sum(userCount, na.rm = TRUE))*100)
# Answer table for Q6 Part 4: Which source has the most users coming from?
cohort_source_most_users_table <- cohort_source_users %>%
slice_max(userCount, n = 5)
# plot: Top 5 sources from which most users are coming
cohort_source_most_users_table_plot <-
cohort_source_most_users_table %>%
dplyr::arrange(userCount) %>%
ggplot(mapping = aes(x = source, y = userCount)) +
geom_col(width = 0.5) +
scale_y_continuous(breaks = seq(0, 1800, by = 100)) +
geom_text(mapping = aes(label = userCount), position=position_dodge(width=0.9), vjust=-0.25) + ggtitle("Top 5 sources from which most users are coming") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# plot: Top 5 sources from which most users are coming
cohort_source_most_users_table_plot
# table: Top 5 sources from which most users are coming
cohort_source_most_users_table
foo_user_tmp <- customer_user_raw %>%
filter(customerId %in% cohort_customers)
foo_scans_tmp <- customer_scans_raw %>%
filter(customerId %in% cohort_customers,
storeName %in% cohort_users_5_stores_scanned_most_from$storeName)
# gender distribution within tiers
foo_user_tmp %>%
ggplot(mapping = aes(x = tierId, fill = gender)) +
geom_bar(position = "dodge") +
ggtitle("gender distribution within tiers")
# billTotal distribution for top 5 stores users scanned most from
foo_scans_tmp %>%
ggplot(mapping = aes(x = storeName, y = billTotal, size = billTotal)) +
geom_point() +
ggtitle("billTotal distribution for each store")
# billTotal distribution for top 5 stores users scanned most from excluding
# Luxe and Big Bazaar (as they contains extreme values that are very large)
foo_scans_tmp %>%
filter(storeName != "Luxe", storeName != "Big Bazaar") %>%
ggplot(mapping = aes(x = storeName, y = billTotal, size = billTotal)) +
scale_y_log10() +
geom_boxplot() +
ggtitle("billTotal distribution for Latt Liv, Lifestyle, Miniso")
# billTotal distribution for top 5 stores users scanned most from
foo_scans_tmp %>%
ggplot(mapping = aes(x = storeName, y = billTotal, size = billTotal)) +
geom_point() +
ggtitle("billTotal distribution for each store")
# billTotal distribution for top 5 stores users scanned most from
foo_scans_tmp %>%
ggplot(mapping = aes(x = storeName, y = billTotal)) +
scale_y_log10() +
geom_boxplot() +
ggtitle("billTotal distribution for each store")
ggtitle("billTotal distribution for top 5 stores users scanned most from")
ggtitle("billTotal distribution for top 5 stores users scanned most from")
# billTotal distribution for top 5 stores users scanned most from
foo_scans_tmp %>%
ggplot(mapping = aes(x = storeName, y = billTotal)) +
scale_y_log10() +
geom_boxplot() +
xlab("log10(billTotal)") +
ggtitle("billTotal distribution for top 5 stores users scanned most from")
rm(list = ls())
# metadata---------------------------------------------------------------------
# author: Aarsh Batra
# Start Date: October 07, 2021
# R version: 4.1.1 (2021-08-10)
# nickname: Kick Things
# Platform: x86_64-w64-mingw32
# arch: x86_64
# Running under: Windows 10 x64 (build 18363)
# R Studio version info: 2021.09.0+351 "Ghost Orchid"
# e-mail: aarshbatra.in@gmail.com
# load libraries---------------------------------------------------------------
library(tidyverse)
library(knitr)
library(devtools)
library(stringr)
library(tidyr)
library(dplyr)
library(skimr)
library(magrittr)
library(data.table)
library(lubridate)
library(roxygen2)
library(testthat)
library(ggplot2)
library(readr)
library(readxl)
# loading the entire package--------------------------------------------------
devtools::load_all()

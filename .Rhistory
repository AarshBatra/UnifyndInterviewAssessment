#   summarise(count = subtract(values))
monthOnMonthDifferenceCompQ7Part2 <-  monthOnMonthCompTableQ7P1 %>%
mutate(diff_unq_users_scan_oct2020_sep2020 = (uniqUsersWhoScannedIn_Oct2020 - uniqUsersWhoScannedIn_Sep2020),
diff_num_bills_scanned_oct2020_sep2020 =
(numBillsScannedIn_Oct2020 - numBillsScannedIn_Sep2020),
diff_scan_amt_billTotal_oct2020_sep2020 =
(scanAmountBillTotal_Oct2020 - scanAmountBillTotal_Sep2020),
diff_couponUnlocks_oct2020_sep2020 =
(couponUnlocks_Oct2020 - couponUnlocks_Sep2020)) %>%
select("tierId", starts_with("diff"))
monthOnMonthDifferenceCompQ7Part2
document()
load_all()
cls
rm(list = ls())
document()
load_all()
# metadata---------------------------------------------------------------------
# author: Aarsh Batra
# Start Date: October 07, 2021
# R version: 4.1.1 (2021-08-10)
# nickname: Kick Things
# Platform: x86_64-w64-mingw32
# arch: x86_64
# Running under: Windows 10 x64 (build 18363)
# R Studio version info: 2021.09.0+351 "Ghost Orchid"
# e-mail: aarshbatra.in@gmail.com
# load libraries---------------------------------------------------------------
library(tidyverse)
library(knitr)
library(devtools)
library(stringr)
library(tidyr)
library(dplyr)
library(skimr)
library(magrittr)
library(data.table)
library(lubridate)
library(roxygen2)
library(testthat)
library(ggplot2)
library(readr)
library(readxl)
# loading the entire package--------------------------------------------------
devtools::load_all()
# read in raw .xlsx datasets into R--------------------------------------------
coupon_transactions_raw <- read_raw_xlsx_data("couponTransactions.xlsx")
customer_scans_raw <- read_raw_xlsx_data("customerScans.xlsx")
customer_user_raw <- read_raw_xlsx_data("customerUser.xlsx")
# exploring coupon_transaction_raw dataset-------------------------------------
# View(coupon_transactions_raw)
# getting a basic summary
skimr::skim(coupon_transactions_raw)
# # number of unique customers
#   length(unique(coupon_transactions_raw$customerId)) # 14979
#
# # number of unique couponUnlock dates
#   length(unique(coupon_transactions_raw$couponUnlockDate)) # 291
#
# # number of unique couponId's
# length(unique(coupon_transactions_raw$couponId)) # 328
# exploring customer_scans_raw dataset-----------------------------------------
# View(customer_scans_raw)
# skim customer_scans_raw dataset
skimr::skim(customer_scans_raw)
# # max amount for billTotal column
# max(customer_scans_raw$billTotal) # why is this too big? look into this.
#
# # number of unique customers
# length(unique(customer_scans_raw$customerId))
#
# # number of unique scan log ids
# length(unique(customer_scans_raw$scanlogId))
#
# # number of unique stores
# length(unique(customer_scans_raw$storeName))
#
# # store with the maximum bill total
# customer_scans_raw %>%
#   filter(billTotal == max(billTotal)) %>%
#   select(storeName)
#
# exploring customer_user_raw data---------------------------------------------
# View(customer_user_raw)
# skim customer_user_raw dataset
skimr::skim(customer_user_raw)
# # number of unique customers
# unique(length(customer_user_raw$customerId))
#
# # number of unique tierId's
# length(unique(customer_user_raw$tierId))
#
# wrapping up exploratory data analysis with a few more queries-----------------
colnames_for_datasets_list <- list(coup_trans_col = colnames
(coupon_transactions_raw),
cust_scans_col = colnames(customer_scans_raw),
cust_user_col = colnames(customer_user_raw))
# one common column between coupon_transactions_raw and customer_scans_raw
sum(colnames_for_datasets_list[[2]] %in%
colnames_for_datasets_list[[1]])  # customerId
# two common columns between customer_scans_raw and customer_user_raw
sum(colnames_for_datasets_list[[3]] %in%
colnames_for_datasets_list[[2]]) # customerId, createdAt
# one common column between customer_user_raw and coupon_transactions_raw
sum(colnames_for_datasets_list[[3]] %in%
colnames_for_datasets_list[[1]]) # customerId
# number of users who have logged in after 1st September 2021, till date
customer_user_raw_Q1_subset <- customer_user_raw %>%
select(customerId, createdAt, lastLogin, tierId) %>%
filter(lastLogin > lubridate::as_datetime("2020-09-01")) %>%
distinct()
customer_user_raw_Q1_subset
# number of users looged in after Sep 2021.
num_users_log_in_after_sep2021 <- customer_user_raw_Q1_subset %>%
nrow()
num_users_log_in_after_sep2021 # answer to Q1Part-1 = 10,323 users
# Of the above 10,323 users, how many signed up in September, 2019.
num_user_logInAfterSep2021_signedUpInSep2019 <- customer_user_raw_Q1_subset %>%
dplyr::filter(lubridate::month(createdAt) == 09, lubridate::year(createdAt) == 2019) %>%
nrow()
num_user_logInAfterSep2021_signedUpInSep2019 # answer to Q2Part-2 = 209 users
# sanity check
sum(is.na(customer_user_raw$earnedPoints))
# Number of users who have earnedPoints more than 2000
num_users_earned_points_more_than_2000 <- customer_user_raw %>%
dplyr::filter(earnedPoints > 2000) %>%
distinct() %>%
nrow()
num_users_earned_points_more_than_2000            # answer to Q2 = 1261
customer_scans_raw_Q3_subset <- customer_scans_raw %>%
filter(customerId == 83, lubridate::month(createdAt) == 02,
lubridate::year(createdAt) == 2020) %>%
dplyr::select(customerId, storeName, createdAt, image) %>%
dplyr::group_by(storeName) %>%
dplyr::summarise(numBillsScanned = length(unique(image))) %>%
dplyr::mutate(customerId = 83, month = "February, 2020") %>%
dplyr::select(customerId, everything())
knitr::kable(customer_scans_raw_Q3_subset)
# creating a coupon_transactions_raw with duplicate rows removed
coupon_transactions_raw_unique <- coupon_transactions_raw[!duplicated(coupon_transactions_raw), ]
# dataset for unique users who unlocked coupons on 10th September 2020
coupon_transactions_raw_Q4_subset <- coupon_transactions_raw_unique %>%
filter(couponUnlockDate == lubridate::as_datetime("2020-09-10")) %>%
group_by(customerId) %>%
summarise(numUniqueCouponsUnlocked = length(unique(couponId))) %>%
mutate(dateOnWhichCouponUnlocked = "September 10, 2020")
# number of unique users who unlocked coupons on 10th September 2020
num_unique_users_unlocked_coupons_on_Sep102020 <-
nrow(coupon_transactions_raw_Q4_subset)     # answer to Q4 = 34 unique users.
# summary table
knitr::kable(coupon_transactions_raw_Q4_subset)
# sanity checks (for understanding purposes only, these sanity check variables
# are not used in code)
foo <- dplyr::left_join(x = coupon_transactions_raw, y = customer_user_raw, by = c("customerId" = "customerId"))
sum(coupon_transactions_raw$customerId %in% customer_user_raw$customerId)
sum(!(customer_user_raw$customerId %in% coupon_transactions_raw$customerId))
foo1Ind <- customer_user_raw$customerId %in% coupon_transactions_raw$customerId
foo1Val <- customer_user_raw$customerId[foo1Ind]
nrow(filter(coupon_transactions_raw, customerId %in% foo1Val))
# First: left_join the "customer_user_raw" and "coupon_transaction_raw_unique" data by the "customerId" column as a KEY
customer_user_coupon_join_Q5 <- dplyr::left_join(x = customer_user_raw, y = coupon_transactions_raw_unique, by = "customerId")
# removing duplicate rows
customer_user_coupon_join_Q5_unique <-  customer_user_coupon_join_Q5[!duplicated(customer_user_coupon_join_Q5), ]
# create Pivot table, by using tierId  as the "group" column
pivot_table_by_tier_Q5 <- customer_user_coupon_join_Q5_unique %>%
dplyr::group_by(tierId) %>%
dplyr::summarise(numUniqueUsersInEachTier = length(unique(customerId)),
totalCouponsUnlocked = sum(!is.na(couponUnlockDate)),
averageEarnedPoints = mean(earnedPoints, na.rm = TRUE),
averageBurnedPoints = mean(burnedPoints, na.rm = TRUE))
knitr::kable(pivot_table_by_tier_Q5)
# get a vector of customerId's that satisfy the cohort conditions--------------
# customers with scan count > 4
customer_scans_raw_Q6_subset <- customer_scans_raw %>%
group_by(customerId) %>%
summarise(scanCount = sum(!is.na(unique(scanlogId)))) %>%
filter(scanCount > 4)
# removing duplicates
customer_scans_raw_Q6_subset_unique <- customer_scans_raw_Q6_subset[
!duplicated(customer_scans_raw_Q6_subset), ]
# For the customers whose scan count is greater than 4, select those whose
# coupon transaction count > 2.
# creating a subset of data that corresponds to those customers whose
# scan count > 4
coupon_transactions_raw_Q6_subset <- coupon_transactions_raw %>%
filter(customerId %in% customer_scans_raw_Q6_subset_unique$customerId)
# removing any duplicate rows
coupon_transactions_raw_Q6_subset_unique <-  coupon_transactions_raw_Q6_subset[!duplicated
(coupon_transactions_raw_Q6_subset), ]
# dataset containing customers whose "scanCount" > 4 and couponTransactionCount
# is > 2
coupon_transactions_raw_Q6_subset_unique_finCohort <- coupon_transactions_raw_Q6_subset_unique %>%
group_by(customerId) %>%
summarise(couponTransactionCount = sum(!is.na(couponUnlockDate))) %>%
filter(couponTransactionCount > 2)
# putting the cohort customers (that satisfy the cohort definition) into a
# vector
cohort_customers <- coupon_transactions_raw_Q6_subset_unique_finCohort$customerId
# making sure that we are only using users that satisfy cohort definition
tier_dist_cohort_users <- customer_user_raw %>%
filter(customerId %in% cohort_customers)
# removing duplicate rows (if any)
tier_dist_cohort_users <- tier_dist_cohort_users[!duplicated(tier_dist_cohort_users), ]
# grouping and summarising by tierId
tier_dist_cohort_users <- tier_dist_cohort_users %>%
group_by(tierId) %>%
summarise(countOfUsers = n()) %>%
mutate(percentOfUsers = (countOfUsers/sum(countOfUsers, na.rm = TRUE))*100)
# plot: tier distribution of cohort users
tier_dist_cohort_users_plot <-  tier_dist_cohort_users %>%
ggplot(mapping = aes(x = tierId, y = countOfUsers)) +
geom_col(width = 0.5) +
scale_y_continuous(breaks = seq(0, 500, by = 30)) +
geom_text(mapping = aes(label = countOfUsers), position=position_dodge(width=0.9), vjust=-0.25) + ggtitle("Tier distribution of Cohort users") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# plot: tier distribution of cohort users
tier_dist_cohort_users_plot
# Table: tier distribution of cohort users
knitr::kable(tier_dist_cohort_users)
# making sure that we are only using users that satisfy cohort definition
gender_dist_cohort_users <- customer_user_raw %>%
filter(customerId %in% cohort_customers)
# removing duplicate rows (if any)
gender_dist_cohort_users <- gender_dist_cohort_users[!duplicated(gender_dist_cohort_users), ]
# grouping and summarising by gender
gender_dist_cohort_users <- gender_dist_cohort_users %>%
group_by(gender) %>%
summarise(countOfUsers = n()) %>%
mutate(percentOfUsers = (countOfUsers/sum(countOfUsers, na.rm = TRUE))*100)
# plot: gender distribution of cohort users
gender_dist_cohort_users_plot <-  gender_dist_cohort_users %>%
ggplot(mapping = aes(x = gender, y = countOfUsers)) +
geom_col(width = 0.5) +
scale_y_continuous(breaks = seq(0, 500, by = 30)) +
geom_text(mapping = aes(label = countOfUsers), position=position_dodge(width=0.9), vjust=-0.25) + ggtitle("Gender distribution of Cohort users") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# plot: gender distribution of cohort users
gender_dist_cohort_users_plot
# table: gender distribution of cohort users
knitr::kable(gender_dist_cohort_users)
# making sure that we are only using users that satisfy cohort definition
cohort_users_5_stores_scanned_most_from <- customer_scans_raw %>%
filter(customerId %in% cohort_customers)
# removing duplicate rows (if any)
cohort_users_5_stores_scanned_most_from <- cohort_users_5_stores_scanned_most_from[!duplicated(cohort_users_5_stores_scanned_most_from), ]
# grouping and summarising by Store name
cohort_users_5_stores_scanned_most_from <- cohort_users_5_stores_scanned_most_from %>%
group_by(storeName) %>%
summarise(scansCount = n()) %>%
slice_max(scansCount, n = 5) %>%
mutate(scansPercentage = (scansCount/sum(scansCount, na.rm = TRUE))*100)
# plot: 5 stores the user scanned the most from
cohort_stores_top5_scanned_most_plot <-
cohort_users_5_stores_scanned_most_from %>%
dplyr::arrange(scansCount) %>%
ggplot(mapping = aes(x = storeName, y = scansCount)) +
geom_col(width = 0.5) +
scale_y_continuous(breaks = seq(0, 1800, by = 100)) +
geom_text(mapping = aes(label = scansCount), position=position_dodge(width=0.9), vjust=-0.25) + ggtitle("5 stores users scanned most from") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# plot: 5 stores customers scanned most from
cohort_stores_top5_scanned_most_plot
# table: 5 stores customers scanned most from
knitr::kable(cohort_users_5_stores_scanned_most_from)
# making sure that we are only using users that satisfy cohort definition
cohort_source_users <- customer_user_raw %>%
filter(customerId %in% cohort_customers)
# removing duplicate rows (if any)
cohort_source_users <- cohort_source_users[!duplicated(cohort_source_users), ]
# grouping and summarizing by "source" column
cohort_source_users <- cohort_source_users %>%
group_by(source) %>%
summarise(userCount = n()) %>%
mutate(userPercentage = (userCount/sum(userCount, na.rm = TRUE))*100)
# Answer table for Q6 Part 4: Which source has the most users coming from?
cohort_source_most_users_table <- cohort_source_users %>%
slice_max(userCount, n = 5)
# plot: Top 5 sources from which most users are coming
cohort_source_most_users_table_plot <-
cohort_source_most_users_table %>%
dplyr::arrange(userCount) %>%
ggplot(mapping = aes(x = source, y = userCount)) +
geom_col(width = 0.5) +
scale_y_continuous(breaks = seq(0, 1800, by = 100)) +
geom_text(mapping = aes(label = userCount), position=position_dodge(width=0.9), vjust=-0.25) + ggtitle("Top 5 sources from which most users are coming") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# plot: Top 5 sources from which most users are coming
cohort_source_most_users_table_plot
# table: Top 5 sources from which most users are coming
cohort_source_most_users_table
# tmp dataset for generating graphs
foo_user_tmp <- customer_user_raw %>%
filter(customerId %in% cohort_customers)
foo_scans_tmp <- customer_scans_raw %>%
filter(customerId %in% cohort_customers,
storeName %in% cohort_users_5_stores_scanned_most_from$storeName)
# gender distribution within tiers
foo_user_tmp %>%
ggplot(mapping = aes(x = tierId, fill = gender)) +
geom_bar(position = "dodge") +
ggtitle("gender distribution within tiers")
# billTotal distribution for top 5 stores users scanned most from
foo_scans_tmp %>%
ggplot(mapping = aes(x = storeName, y = billTotal)) +
scale_y_log10() +
geom_boxplot() +
xlab("log10(billTotal)") +
ggtitle("billTotal (in log scale base 10) distribution for top 5 stores users scanned most from")
# sanity checks
sum(customer_scans_raw$customerId %in%
customer_user_raw$customerId) == length(customer_scans_raw$customerId)
sum(customer_user_raw$customerId %in%
customer_scans_raw$customerId)
# performing a left-join and combining the "customer_user_raw" data with "customer_scans_raw data"
customer_user_scans_join_Q7 <- dplyr::left_join(
select(customer_user_raw, -createdAt), customer_scans_raw, by = "customerId")
# removing duplicate rows (if any) unlikely that we will see duplicate rows here as there are a lot of columns
customer_user_scans_join_Q7 <- customer_user_scans_join_Q7[!duplicated(customer_user_scans_join_Q7), ]
# adding 2 columns, a month and a year column to the customer_user_scans_join_Q7 dataset------------------------------------------------------------------------
# we will derive these column is derived from the "createdAt" column of the joined dataset. The "createdAt" column in the joined dataset, contains the date at which the scan was created.
# Note that, there was a "createdAt" column in the customer_user_raw dataset, # although the name is the same, that refers to the date at which the customer signed up. To avoid confusion, I removed that column, while joining rhe dataset.
# So, the "createdAt" in the joined dataset, corresponds to the "createdAt" column of the "customer_scans_raw" data. It should be interpreted as, it would have been interpreted in the scans dataset, i.e. it is the date at which the scan was created.
# From this column, I will derive two new columns and add it to the joined data set before.
customer_user_scans_join_Q7 <- customer_user_scans_join_Q7 %>%
mutate(scanCreatedMonth = lubridate::month(createdAt),
scanCreatedYear = lubridate::year(createdAt))
# left_join customer_user_scans_join_Q7 dataset with coupon_transactions_raw_unique--------------------------------------
# sanity checks before joining
sum(coupon_transactions_raw_unique$customerId %in%
customer_user_scans_join_Q7$customerId)
sum(customer_user_scans_join_Q7$customerId %in% coupon_transactions_raw_unique$customerId)
# left-joining after sanity check complete
customer_user_scans_join_Q7_join_coupTransRawUniq <-
left_join(customer_user_scans_join_Q7, coupon_transactions_raw_unique,
by = "customerId")
# Create parts of table separately and then bind them together------------------------------------------------------------
# Unique users (by TierId) who scanned in Sep 2020-----------------------
# selecting relevant columns
uniq_users_byTier_scanned_Sep2020 <- customer_user_scans_join_Q7 %>%
select(customerId, tierId, scanCreatedMonth, scanCreatedYear, createdAt)
# removing duplicates
uniq_users_byTier_scanned_Sep2020 <- uniq_users_byTier_scanned_Sep2020[!duplicated(uniq_users_byTier_scanned_Sep2020), ]
# uniq users by tier who scanned in sep 2020 summary table
uniq_users_byTier_scanned_Sep2020 <- uniq_users_byTier_scanned_Sep2020 %>%
filter(scanCreatedMonth %in% c(9), scanCreatedYear %in% c(2020), !is.na(createdAt)) %>%
group_by(tierId) %>%
summarise(uniqUsersWhoScannedIn_Sep2020 = length(unique(customerId)))
# adding a row for tier-5 and filling it with NA as there is no data in tier-5
uniq_users_byTier_scanned_Sep2020 <- dplyr::add_row(
uniq_users_byTier_scanned_Sep2020, tierId = 5, uniqUsersWhoScannedIn_Sep2020 = NA)
# Unique users (by tierId) who scanned in Oct 2020-----------------------------------
# selecting relevant columns
uniq_users_byTier_scanned_Oct2020 <- customer_user_scans_join_Q7 %>%
select(customerId, tierId, scanCreatedMonth, scanCreatedYear, createdAt)
# removing duplicates
uniq_users_byTier_scanned_Oct2020 <- uniq_users_byTier_scanned_Oct2020[!duplicated(uniq_users_byTier_scanned_Oct2020), ]
# Unique users (by tierId) who scanned in Oct 2020 summary table
uniq_users_byTier_scanned_Oct2020 <- uniq_users_byTier_scanned_Oct2020 %>%
filter(scanCreatedMonth %in% c(10), scanCreatedYear %in% c(2020), !is.na(createdAt)) %>%
group_by(tierId) %>%
summarise(uniqUsersWhoScannedIn_Oct2020 = length(unique(customerId)))
# Number of bills scanned (Image) in Sep 2020---------------------------------------
# selecting relevant columns
num_bills_scanned_Sep2020_byTier <- customer_user_scans_join_Q7 %>%
select(tierId, customerId, scanCreatedMonth, scanCreatedYear, image)
# removing duplicates
num_bills_scanned_Sep2020_byTier <- num_bills_scanned_Sep2020_byTier[!duplicated(num_bills_scanned_Sep2020_byTier), ]
# Number of bills scanned (Image) in Sep 2020 summary table
num_bills_scanned_Sep2020_byTier <-  num_bills_scanned_Sep2020_byTier %>%
filter(scanCreatedMonth %in% c(9), scanCreatedYear %in% c(2020), !is.na(image)) %>%
group_by(tierId) %>%
summarise(numBillsScannedIn_Sep2020 = length(image))
# adding a row for tier-5 and filling it with NA as there is no data in tier-5
num_bills_scanned_Sep2020_byTier <- dplyr::add_row(num_bills_scanned_Sep2020_byTier,
tierId = 5, numBillsScannedIn_Sep2020 = NA)
# Number of bills scanned (Image) in Oct 2020-------------------------------------------
# selecting relevant columns
num_bills_scanned_Oct2020_byTier <- customer_user_scans_join_Q7 %>%
select(tierId, customerId, scanCreatedMonth, scanCreatedYear, image)
# removing duplicates
num_bills_scanned_Oct2020_byTier <- num_bills_scanned_Oct2020_byTier[!duplicated(num_bills_scanned_Oct2020_byTier), ]
# Number of bills scanned (Image) in Oct 2020 summary table
num_bills_scanned_Oct2020_byTier <-  num_bills_scanned_Oct2020_byTier %>%
filter(scanCreatedMonth %in% c(10), scanCreatedYear %in% c(2020), !is.na(image)) %>%
group_by(tierId) %>%
summarise(numBillsScannedIn_Oct2020 = length(image))
# Scan Amount (billTotal) Sep 2020------------------------------------------------------
# selecting relevant columns
scan_amount_bill_total_Sep2020_byTier <- customer_user_scans_join_Q7 %>%
select(customerId, tierId, scanCreatedMonth, scanCreatedYear, billTotal)
# removing duplicates
scan_amount_bill_total_Sep2020_byTier <- scan_amount_bill_total_Sep2020_byTier[!duplicated(scan_amount_bill_total_Sep2020_byTier), ]
# Scan Amount (billTotal) Sep 2020 summary table
scan_amount_bill_total_Sep2020_byTier <-
scan_amount_bill_total_Sep2020_byTier %>%
filter(scanCreatedMonth %in% c(9), scanCreatedYear %in% c(2020)) %>%
group_by(tierId) %>%
summarise(scanAmountBillTotal_Sep2020 = sum(billTotal, na.rm = TRUE))
# adding a row for tier-5 and filling it with NA as there is no data in tier-5
scan_amount_bill_total_Sep2020_byTier <- dplyr::add_row(
scan_amount_bill_total_Sep2020_byTier, tierId = 5,
scanAmountBillTotal_Sep2020 = NA
)
# Scan Amount (billTotal) October 2020--------------------------------------------
# selecting relevant columns
scan_amount_bill_total_Oct2020_byTier <- customer_user_scans_join_Q7 %>%
select(customerId, tierId, scanCreatedMonth, scanCreatedYear, billTotal)
# removing duplicates
scan_amount_bill_total_Oct2020_byTier <- scan_amount_bill_total_Oct2020_byTier[!duplicated(scan_amount_bill_total_Oct2020_byTier), ]
# Scan Amount (billTotal) October 2020 summary table
scan_amount_bill_total_Oct2020_byTier <-
scan_amount_bill_total_Oct2020_byTier %>%
filter(scanCreatedMonth %in% c(10), scanCreatedYear %in% c(2020)) %>%
group_by(tierId) %>%
summarise(scanAmountBillTotal_Oct2020 = sum(billTotal, na.rm = TRUE))
# Coupon Unlocks in September 2020-----------------------------------------------------
# selecting relevant columns
coupon_unlocks_sep2020_byTier <- customer_user_scans_join_Q7_join_coupTransRawUniq %>%
select(customerId, tierId, scanCreatedMonth, scanCreatedYear, couponId,
couponUnlockDate)
# removing duplicates
coupon_unlocks_sep2020_byTier <- coupon_unlocks_sep2020_byTier[!duplicated(coupon_unlocks_sep2020_byTier), ]
# Coupon Unlocks in September 2020 summary table
coupon_unlocks_sep2020_byTier <-  coupon_unlocks_sep2020_byTier  %>%
filter(scanCreatedMonth %in% c(9), scanCreatedYear %in% c(2020)) %>%
group_by(tierId) %>%
summarise(couponUnlocks_Sep2020 = sum(!is.na(couponUnlockDate)))
# adding a row for tier-5 and filling it with NA as there is no data in tier-5
coupon_unlocks_sep2020_byTier <- dplyr::add_row(coupon_unlocks_sep2020_byTier, tierId = 5, couponUnlocks_Sep2020 = NA)
# Coupon Unlocks in October 2020-----------------------------------------------------------
# selecting relevant columns
coupon_unlocks_Oct2020_byTier <- customer_user_scans_join_Q7_join_coupTransRawUniq %>%
select(customerId, tierId, scanCreatedMonth, scanCreatedYear, couponId,
couponUnlockDate)
# removing duplicate rows
coupon_unlocks_Oct2020_byTier <- coupon_unlocks_Oct2020_byTier[!duplicated(coupon_unlocks_Oct2020_byTier), ]
# Coupon Unlocks in October 2020 summary table
coupon_unlocks_Oct2020_byTier <-  coupon_unlocks_Oct2020_byTier %>%
filter(scanCreatedMonth %in% c(10), scanCreatedYear %in% c(2020)) %>%
group_by(tierId) %>%
summarise(couponUnlocks_Oct2020 = sum(!is.na(couponUnlockDate)))
# All sub-parts of table created. Now, joining all the sub-parts of the table into a single dataset, in a format as asked in Q7 Part 1---------------------
monthOnMonthCompTableQ7P1 <- left_join(left_join(left_join(left_join(left_join(left_join(left_join(uniq_users_byTier_scanned_Sep2020,
uniq_users_byTier_scanned_Oct2020, by = "tierId"),
num_bills_scanned_Sep2020_byTier, by = "tierId"),
num_bills_scanned_Oct2020_byTier, by = "tierId"),
scan_amount_bill_total_Sep2020_byTier, by = "tierId"),
scan_amount_bill_total_Oct2020_byTier, by = "tierId"),
coupon_unlocks_sep2020_byTier, by = "tierId"),
coupon_unlocks_Oct2020_byTier, by = "tierId")
knitr::kable(monthOnMonthCompTableQ7P1)
# bringing the data into a tidy format to make plots with ggplot2
monthOnMonthCompTableQ7P1_tidyFormat <- pivot_longer(monthOnMonthCompTableQ7P1, cols = !tierId, names_to = c("trait", "monthYear"), names_pattern = "(.+)_(.+)" , values_to = "values")
# Graph 1: Comparing total unique users who scanned in Sep v/s Oct (2020)
monthOnMonthCompTableQ7P1_tidyFormat %>%
filter(trait == "uniqUsersWhoScannedIn") %>%
ggplot(mapping = aes(x = tierId, y = values, fill = monthYear)) +
geom_col(position = "dodge") +
scale_y_continuous(breaks = seq(0, 500, by = 50)) +
ggtitle("Unique users who scanned in Sep 2020 and Oct 2020") +
geom_text(mapping = aes(label = values), position=position_dodge(width=0.9), vjust=-0.25) +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
# Graph 2: Comparing number of bills scanned in Sep v/s Oct (2020)
monthOnMonthCompTableQ7P1_tidyFormat %>%
filter(trait == "numBillsScannedIn") %>%
ggplot(mapping = aes(x = tierId, y = values, fill = monthYear)) +
geom_col(position = "dodge") +
ggtitle("Number of bills scanned in Sep 2020 and Oct 2020") +
geom_text(mapping = aes(label = values), position=position_dodge(width=0.9), vjust=-0.25) +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
# Graph 3: Comparing: Scanned amount bill total in Sep v/s Oct 2020
monthOnMonthCompTableQ7P1_tidyFormat %>%
filter(trait == "scanAmountBillTotal") %>%
ggplot(mapping = aes(x = tierId, y = values, fill = monthYear)) +
geom_col(position = "dodge") +
ggtitle("Scanned amount bill total in Sep 2020 and Oct (2020)") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
# Graph 4: Comparing Coupon Unlocks in Sep v/s Oct (2020)
monthOnMonthCompTableQ7P1_tidyFormat %>%
filter(trait == "couponUnlocks") %>%
ggplot(mapping = aes(x = tierId, y = values, fill = monthYear)) +
geom_col(position = "dodge") +
ggtitle("Coupon Unlocks in Sep 2020 and Oct (2020)") +
geom_text(mapping = aes(label = values), position=position_dodge(width=0.9), vjust=-0.25) +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
# Graph 5: A facetted bar plot to see all of the above in one graph (but y axis will be in log10 scale, as values for each group differ a lot)
monthOnMonthCompTableQ7P1_tidyFormat %>%
ggplot(mapping = aes(x = tierId, y = values, fill = monthYear)) +
geom_col(position = "dodge") +
scale_y_log10()+
facet_wrap(~ trait) +
ggtitle("Above 4 graphs in one plot with y axis in log10 scale")
# adding 4 (difference columns) to monthOnMonthTableQ7P1 and creating a new dataset
# with only those columns and the tierId
monthOnMonthDifferenceCompQ7Part2 <-  monthOnMonthCompTableQ7P1 %>%
mutate(diff_unq_users_scan_oct2020_sep2020 = (uniqUsersWhoScannedIn_Oct2020 - uniqUsersWhoScannedIn_Sep2020),
diff_num_bills_scanned_oct2020_sep2020 =
(numBillsScannedIn_Oct2020 - numBillsScannedIn_Sep2020),
diff_scan_amt_billTotal_oct2020_sep2020 =
(scanAmountBillTotal_Oct2020 - scanAmountBillTotal_Sep2020),
diff_couponUnlocks_oct2020_sep2020 =
(couponUnlocks_Oct2020 - couponUnlocks_Sep2020)) %>%
select("tierId", starts_with("diff"))
monthOnMonthDifferenceCompQ7Part2
